
" settings {{{1

set showfulltag
set showtabline   =1
set ttyfast
set whichwrap     =h,l

set linebreak
set breakindent
set breakindentopt=min:40

if has('multi_byte') && &encoding ==# 'utf-8'
  let &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±'
  let &fillchars = 'diff:▚'
  let &showbreak = '↪ '
else
  let &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  let &fillchars = 'stlnc:#'
  let &showbreak = '-> '
endif

" }}}1

" mapping {{{1

nnoremap <tab>        <c-w>w
nnoremap <s-tab>      <c-w>W


nnoremap gg           ggzv
nnoremap G            Gzv




nnoremap [<space>     :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>     :<c-u>put =repeat(nr2char(10), v:count1)<cr>

nnoremap [e           :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e           :<c-u>execute 'move +'. v:count1<cr>

" switch comma-separated arguments
nnoremap [w           :normal F,h]w2w<cr>
nnoremap ]w           :let s=&isk \| setl isk+=\",' \| exe "norm diwmmebgPdw'mP" \| let &isk=s<cr>

nnoremap }            }zz
nnoremap {            {zz
nnoremap ]]           ]]zz
nnoremap [[           [[zz
nnoremap []           []zz
nnoremap ][           ][zz

nnoremap g;           g;zvzz
nnoremap g,           g,zvzz

nnoremap <left>       <c-w>>
nnoremap <right>      <c-w><
nnoremap <up>         <c-w>-
nnoremap <down>       <c-w>+

nnoremap <a-h>        <c-w>h
nnoremap <a-j>        <c-w>j
nnoremap <a-k>        <c-w>k
nnoremap <a-l>        <c-w>l

xnoremap <            <gv
xnoremap >            >gv

onoremap gv           :<c-u>normal! gv<cr>

nnoremap Q            gqap

nnoremap <leader>ev   :vsplit $MYVIMRC<cr>
nnoremap <leader>rv   :source $MYVIMRC<cr>
nnoremap <leader>rr   :source %<cr>

nnoremap <leader>si   :echo mhi#syninfo()<cr>
nnoremap <leader>ss   :echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')<cr>

nnoremap <leader>M    :<c-u><c-r><c-r>='let @'. v:register .' = '. string(getreg(v:register))<cr><c-f><left>
nnoremap <leader>j    <c-^>
nnoremap <leader>o    :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<cr> \| xargs open<cr><cr>
nnoremap <leader>v    `[v`]
nnoremap <leader>w    :update<cr>
nnoremap <leader>x    :xit<cr>

nnoremap <leader>l    :noh<cr>:diffupdate<cr>:syntax sync fromstart<cr><c-l>

nnoremap '            `
nnoremap `            '

nnoremap <bs>         <c-t>
nnoremap <cr>         :call mhi#jump()<cr>

cnoremap <c-n>        <down>
cnoremap <c-p>        <up>

cnoremap <leader>r    $VIMRUNTIME/
cnoremap <leader>ft   ~/.vim/after/ftplugin/

xnoremap *            :<c-u>call mhi#search()<cr>//<cr>
xnoremap #            :<c-u>call mhi#search()<cr>??<cr>
xnoremap <leader>*    :<c-u>silent! execute mhi#search_all()<cr>

if has('nvim')
  nnoremap <leader>t  :vsplit +terminal<cr>
  tnoremap <esc>      <c-\><c-n>
  tnoremap <a-h>      <c-\><c-n><c-w>h
  tnoremap <a-j>      <c-\><c-n><c-w>j
  tnoremap <a-k>      <c-\><c-n><c-w>k
  tnoremap <a-l>      <c-\><c-n><c-w>l
  autocmd BufEnter term://* startinsert
  " autocmd TermClose * call feedkeys('<cr>')
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1
elseif empty($TMUX)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  let &t_SR = "\<Esc>]50;CursorShape=2\x7"
else
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
endif


" }}}1

" vim-dispatch {{{1

nnoremap <leader>dd  :Dispatch<cr>
nnoremap <leader>dm  :Make<cr>
nnoremap <leader>ds  :Start<cr>
nnoremap <leader>dc  :Copen<cr>

au BufReadPost * if getline(1) =~# '^#!' | let b:dispatch = getline(1)[2:-1] . ' %' | let b:start = b:dispatch | endif
au FileType markdown let b:dispatch = 'mdl % | sort -t: -k2 -n'
au FileType vim      let b:dispatch = ':Runtime' | let b:start = ':Runtime|PP'

let g:dispatch_compilers = {
      \ 'mdl': 'gcc',
      \ }

" }}}1

augroup VimReload
  autocmd!
  autocmd BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" vim: ft=vim
